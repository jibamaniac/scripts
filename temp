import maya.cmds as cmds
import maya.api.OpenMaya as om
import maya.OpenMaya as om2

maya_useNewAPI = True

def targetObj(*args):
    selection = cmds.ls(sl=True)
    return [str(obj) for obj in selection]

def selVertices(*args):
    selectedObj = cmds.ls(selection=True, flatten=True)
    if not selectedObj:
        return []  
    return selectedObj
    
def normalDir(remVts):
    normals = []
    for vtx in remVts:
        normal = cmds.polyNormalPerVertex(vtx, query=True, xyz=True)
        normals.append(normal)
    return normals
    
def fn_mesh(name):
    sel_list = om.MSelectionList()
    sel_list.add(name)
    dag_path = sel_list.getDagPath(0)
    fn_mesh = om.MFnMesh(dag_path)
    return fn_mesh

def pos_dir(source, ray_count):
    sel = om2.MSelectionList()
    om2.MGlobal.getActiveSelectionList(sel)
    
    dag = om2.MDagPath()
    component = om2.MObject()
    sel.getDagPath(0, dag, component)
    if not component.isNull():
        vert_itr = om2.MItMeshVertex(dag, component)
        ray_float_point_array = []
        while not vert_itr.isDone():
            position = vert_itr.position(om2.MSpace.kWorld)
            vectorPos = (position.x, position.y, position.z)
            ray_float_point_array.append(vectorPos)
            vert_itr.next()
    return ray_float_point_array
    
def intersections(newTarget, source, ray_count, remVts, direction, distance_limit):
    fn_mesh_target = fn_mesh(newTarget)
    arrays = pos_dir(source, ray_count)
    ray_float_point_array = arrays
    k_space = om.MSpace.kWorld
    testBothDirections = False
    k_tolerance = 0.001
    maxParam = 999999  
    gen_list_inter = om.MPointArray()
    vertDict = {}
    
    for i in range(ray_count):
        tempRaySource = ray_float_point_array[i]
        raySource = om.MFloatPoint(tempRaySource[0], tempRaySource[1], tempRaySource[2])
        vtx = remVts[i]
        world_position = cmds.pointPosition(vtx, world=True)
        rayDir_list = cmds.polyNormalPerVertex(vtx, query=True, xyz=True)
        rayDir = om.MFloatVector(rayDir_list[0], rayDir_list[1], rayDir_list[2])  # Convert to MFloatVector

        hit = fn_mesh_target.closestIntersection(raySource,
                                                 rayDir,
                                                 k_space,
                                                 maxParam,
                                                 testBothDirections,
                                                 tolerance=k_tolerance)
        if hit and hit[0]:
            hit_point, hit_ray_param, hit_face, hit_triangle, hit_bary_1, hit_bary_2 = hit
            
            # Calculate distance from ray source to hit point
            distance = (hit_point - raySource).length()
            if distance < distance_limit:  # Check against the distance limit
                gen_list_inter.append(hit_point)
                position = (hit_point.x, hit_point.y, hit_point.z)
                vertDict[str(vtx)] = position  
    
    return gen_list_inter, vertDict


def move_vertices(gen_list_inter, vertDict, ray_count, source):
    for vtx, position in vertDict.items():
        cmds.select(vtx)
        if position != (0.0, 0.0, 0.0):
            cmds.xform(vtx, ws=True, t=position, puv=True) 
            
def color_vertices(gen_list_inter, vertDict, ray_count, source):
    for vtx, position in vertDict.items():
        cmds.select(vtx)
        if position != (0.0, 0.0, 0.0):
            mel.eval('expandPolyGroupSelection; polyColorPerVertex -r 1 -g 0 -b 0 -a 1 -cdo;')

def setDirNorm(calcDir):
    return om.MFloatVector(calcDir[0][0], calcDir[0][1], calcDir[0][2])

def up():
    return om.MFloatVector(0,1,0)
    
def down():
    return om.MFloatVector(0,-1,0)    

def general(targetObj, ray_count, direction):
    source = "source"
    newTarget = targetObj[0]
    remVts = setVariables0()
    gen_list_inter, vertDict = intersections(newTarget, source, ray_count, remVts, direction, 0.5)
    color_vertices(gen_list_inter, vertDict, ray_count, source)

def setVariables0():
    remVts = selVertices()
    return(remVts)

def setVariables1():
    global direction  # Ensure the global 'direction' variable is used
    target_obj = targetObj()
    remVts = setVariables0()
    rays = len(remVts)
    calcDir = normalDir(remVts)
    return rays, direction, calcDir


def set_up_direction_button(*args):
    global direction
    direction = up()
    cmds.confirmDialog(title="Up Direction", message="Up Direction Set.")
    
def set_down_direction_button(*args):
    global direction
    direction = down()
    cmds.confirmDialog(title="Down Direction", message="Down Direction Set.")
    
def on_target_obj_button(*args):
    global target_obj
    target_obj = targetObj()
    cmds.confirmDialog(title="Target Object", message="Target Object selected.")
    
def on_set_selected_vertices_button(*args):
    global remVts
    remVts = setVariables0()
    cmds.confirmDialog(title="Remember Vertex Select", message="Vertices selected.")

def on_general_button(*args):
    if len(target_obj) < 1:
        cmds.warning("Please Select A Target Object")
    else:
        remVts = setVariables0()
        if not remVts:  # Check if remVts is an empty list
            cmds.warning("Please Select Vertices To Ray To Target")
        else: 
            rays, direction, calcDir = setVariables1()
            general(target_obj, rays, direction)
            cmds.confirmDialog(title="Operation Complete", message="General function executed.")

direction = om.MFloatVector(0, 1, 0)  # Set default to up direction (or any other desired direction)

def create_window():
    window_name = "myWindow44"
    
    # Delete the window if it already exists
    if cmds.window(window_name, exists=True):
        cmds.deleteUI(window_name)
    
    window = cmds.window(window_name, title="Ray Vertices To Target", widthHeight=(300, 400))
    cmds.columnLayout(adjustableColumn=True, rowSpacing=10)
    
    cmds.text(label="Project Vertices to Target", align="center", font="boldLabelFont", backgroundColor=(0.7, 0.7, 0.7))
    cmds.button(label="Select Target Object", command=on_target_obj_button, backgroundColor=(0.6, 0.8, 0.6))
    
    # Insert a separator and a label
    cmds.separator(height=10)
    cmds.text(label="Set Vertices To Ray", align="center", font="boldLabelFont", backgroundColor=(0.7, 0.7, 0.7))
    
    cmds.button(label="Select and Set/Reset Vertices", command=on_set_selected_vertices_button, backgroundColor=(0.6, 0.8, 0.6))
    
    # Insert a separator and a label
    cmds.separator(height=10)
    cmds.text(label="Set Direction : Pick 1", align="center", font="boldLabelFont", backgroundColor=(0.7, 0.7, 0.7))
    
    cmds.button(label="Set Up Direction", command=set_up_direction_button, backgroundColor=(1.0, 0.7, 0.3))
    cmds.button(label="Set Down Direction", command=set_down_direction_button, backgroundColor=(1.0, 0.7, 0.3))
    
    # Insert a separator and a label
    cmds.separator(height=10)
    cmds.text(label="Project The Vertices", align="center", font="boldLabelFont", backgroundColor=(0.7, 0.7, 0.7))
    cmds.button(label="Run General Function", command=on_general_button, backgroundColor=(0.4, 0.6, 0.8))
    
    cmds.showWindow(window)

create_window()

#AG Section
import math
import cmath
import hou
import random


node = hou.node(".")
n = node.parm("n").eval()
n2 = node.parm("n2").eval()
max_level = node.parm("max_level").eval()
min_size = node.parm("min_size").eval()


#n = random.uniform(0.5, .99) # of main circles > 1
#n2 = random.uniform(0.05, .5) # main circle size
mysel = hou.selectedNodes()[0]
geo = mysel.geometry()

ptsPos, ptScl = [], []

for pt in geo.points():
    ptsPos.append(pt.position())
    scale = pt.attribValue("pscale")
    ptScl.append(scale)


MIN_SIZE       = min_size
MAX_LEVEL      = max_level 
INCHES_TO_PTS  = 10

R  = 3.5 * INCHES_TO_PTS

A  = n * R 
B  = n2 * R 


def SolveForD (a, b, c):
    s = a + b + c
    r = 2 * math.sqrt ( a*b + a*c + b*c )
    
    return  s + r
    
def CalcCircleCoords (a, z1, b, z2, c, z3):

    # Descartes formula to determine z4:
    # note a, b, c, d are bends
    #z1, z2, z3, z4
    # (az1)^2 + (bz2)^2 + (cz3)^2 + (dz4)^2 = 1/2 (az1 + bz2 + dz4 + dz4)^2
   
    # Note dz4 can be solved by:
    # dz4 = (az1 + bz2 + cz3) +/- 2 sqrt ( abz1z2 + acz1z3 + bcz2z3 )

    az1 = a * z1
    bz2 = b * z2
    cz3 = c * z3

    d = SolveForD (a, b, c)
    
    # solve for dz4... 
    z4 = ( ( az1 + bz2 + cz3 ) + 2 * cmath.sqrt ( az1*bz2 + az1*cz3 + bz2*cz3 ) ) / d


    return [ d, z4 ]


def SolveForDPrime (a, z1, b, z2, c, z3, d, z4):

    # Recall... (similar with the complex versions)
    # d + d' = 2 ( a + b + c )
    # d' = 2 ( a + b + c ) - d

    dprime = 2 * ( a + b + c ) - d

    az1 = a * z1
    bz2 = b * z2
    cz3 = c * z3
    dz4 = d * z4

    z4prime = ( 2 * ( az1 + bz2 + cz3 ) - dz4 ) / dprime
   

    return [ dprime, z4prime ]
    
def RecursivelySolve (a, z1, b, z2, c, z3, d, z4, level):

    if (level < 0):
        return

    bprime, z2prime = SolveForDPrime (a, z1,  c, z3,  d, z4,  b, z2)
    cprime, z3prime = SolveForDPrime (a, z1,  b, z2,  d, z4,  c, z3)
    dprime, z4prime = SolveForDPrime (a, z1,  b, z2,  c, z3,  d, z4)

    scale1 = (abs(1 / bprime)) 
    scale2 = (abs(1 / cprime))
    scale3 = (abs(1 / dprime))
    
    if (scale1 > MIN_SIZE):
        dx = z2prime.real
        dy = z2prime.imag
        pos = [dx,0.0,dy]
        pt = geo.createPoint()
        pt.setAttribValue("P", pos)
        pt.setAttribValue("pscale", scale1)

    if (scale2 > MIN_SIZE):
        pt = geo.createPoint()
        dx = z3prime.real
        dy = z3prime.imag
        pos = [dx,0.0,dy]
        pt = geo.createPoint()
        pt.setAttribValue("P", pos)
        pt.setAttribValue("pscale", scale2)
        
    if (scale3 > MIN_SIZE):
        pt = geo.createPoint()
        dx = z4prime.real
        dy = z4prime.imag
        pos = [dx,0.0,dy]
        pt = geo.createPoint()
        pt.setAttribValue("P", pos)
        pt.setAttribValue("pscale", scale3)

    RecursivelySolve (bprime, z2prime,  a, z1,  c, z3,  d, z4,  level - 1)
    RecursivelySolve (cprime, z3prime,  a, z1,  b, z2,  d, z4,  level - 1)
    RecursivelySolve (dprime, z4prime,  a, z1,  b, z2,  c, z3,  level - 1)


def MakeApollonianGasket (a, z1, b, z2, c, z3):
    d, z4 = CalcCircleCoords (a, z1,  b, z2,  c, z3)
    dprime, z4prime = SolveForDPrime  (a, z1,  b, z2,  c, z3,  d, z4)
    
    #make pts for circles
    for i in range(0,3):
        pt = geo.createPoint()
        #pt.setPosition(z1)
        #print(z3)

    RecursivelySolve (a, z1,  b, z2,  c, z3,  d, z4,  MAX_LEVEL)
    RecursivelySolve (a, z1,  b, z2,  c, z3,  dprime, z4prime,  MAX_LEVEL)

RA = R - A
RB = R - B

Theta = math.acos ( ( A ** 2  +  B ** 2  -  (RA + RB) ** 2 ) / ( 2*A*B ) )

z1 = complex (0, 0)
a = -1 / R

z2 = complex (A, 0)
b = 1 / RA

z3 = complex (B * math.cos(Theta), B * math.sin(Theta))
c = 1 / RB
#print(z3)

MakeApollonianGasket (a, z1, b, z2, c, z3)

 

    
#Pt2
import math
import cmath
import hou

node = hou.node(".")
n = node.parm("n").eval()
n2 = node.parm("n2").eval()
max_level = node.parm("max_level").eval()
min_size = node.parm("min_size").eval()

mysel = hou.selectedNodes()[0]
geo = mysel.geometry()

# Set up initial radii for the tangent spheres
R = 3.5
A = n * R
B = n2 * R

def solve_for_d(a, b, c):
    """Calculate the curvature (bend) for the fourth tangent sphere."""
    s = a + b + c
    r = 2 * math.sqrt(a * b + a * c + b * c)
    return s + r

def calc_sphere_coords(a, z1, b, z2, c, z3):
    """Calculate the center and curvature of the fourth tangent sphere."""
    az1 = a * z1
    bz2 = b * z2
    cz3 = c * z3
    d = solve_for_d(a, b, c)
    z4 = (az1 + bz2 + cz3 + 2 * cmath.sqrt(az1 * bz2 + az1 * cz3 + bz2 * cz3)) / d
    return d, z4

def recursively_solve(a, z1, b, z2, c, z3, d, z4, level):
    if level < 0:
        return

    # Generate new tangent spheres
    bprime, z2prime = solve_for_d(a, c, d) - b, (2 * (a * z1 + c * z3 + d * z4) - b * z2) / bprime
    cprime, z3prime = solve_for_d(a, b, d) - c, (2 * (a * z1 + b * z2 + d * z4) - c * z3) / cprime
    dprime, z4prime = solve_for_d(a, b, c) - d, (2 * (a * z1 + b * z2 + c * z3) - d * z4) / dprime

    scale1 = abs(1 / bprime)
    scale2 = abs(1 / cprime)
    scale3 = abs(1 / dprime)

    if scale1 > min_size:
        pos = [z2prime.real, z2prime.imag, 0.0]
        pt = geo.createPoint()
        pt.setAttribValue("P", pos)
        pt.setAttribValue("pscale", scale1)

    if scale2 > min_size:
        pos = [z3prime.real, 0.0, z3prime.imag]
        pt = geo.createPoint()
        pt.setAttribValue("P", pos)
        pt.setAttribValue("pscale", scale2)

    if scale3 > min_size:
        pos = [z4prime.real, z4prime.imag, 0.0]
        pt = geo.createPoint()
        pt.setAttribValue("P", pos)
        pt.setAttribValue("pscale", scale3)

    # Recursive calls to fill the structure
    recursively_solve(bprime, z2prime, a, z1, c, z3, d, z4, level - 1)
    recursively_solve(cprime, z3prime, a, z1, b, z2, d, z4, level - 1)
    recursively_solve(dprime, z4prime, a, z1, b, z2, c, z3, level - 1)

def make_apollonian_gasket(a, z1, b, z2, c, z3):
    d, z4 = calc_sphere_coords(a, z1, b, z2, c, z3)
    dprime, z4prime = solve_for_d(a, b, c) - d, z4
    recursively_solve(a, z1, b, z2, c, z3, d, z4, max_level)
    recursively_solve(a, z1, b, z2, c, z3, dprime, z4prime, max_level)

# Initial positions and curvatures for the first three tangent spheres
z1 = complex(0, 0)
a = -1 / R
z2 = complex(A, 0)
b = 1 / (R - A)
z3 = complex(B * math.cos(math.pi / 3), B * math.sin(math.pi / 3))
c = 1 / (R - B)

# Generate the 3D Apollonian Gasket
make_apollonian_gasket(a, z1, b, z2, c, z3)
